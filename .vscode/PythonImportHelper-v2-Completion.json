[
    {
        "label": "ServiceException",
        "importPath": "core.common.exceptions",
        "description": "core.common.exceptions",
        "isExtraImport": true,
        "detail": "core.common.exceptions",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "core.api.v1.tasks.models.tasks",
        "description": "core.api.v1.tasks.models.tasks",
        "isExtraImport": true,
        "detail": "core.api.v1.tasks.models.tasks",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "core.api.v1.tasks.models.tasks",
        "description": "core.api.v1.tasks.models.tasks",
        "isExtraImport": true,
        "detail": "core.api.v1.tasks.models.tasks",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "core.api.v1.tasks.models.tasks",
        "description": "core.api.v1.tasks.models.tasks",
        "isExtraImport": true,
        "detail": "core.api.v1.tasks.models.tasks",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "core.api.v1.tasks.models.tasks",
        "description": "core.api.v1.tasks.models.tasks",
        "isExtraImport": true,
        "detail": "core.api.v1.tasks.models.tasks",
        "documentation": {}
    },
    {
        "label": "TaskSerializer",
        "importPath": "core.api.v1.tasks.shemas.serializers",
        "description": "core.api.v1.tasks.shemas.serializers",
        "isExtraImport": true,
        "detail": "core.api.v1.tasks.shemas.serializers",
        "documentation": {}
    },
    {
        "label": "TaskSerializer",
        "importPath": "core.api.v1.tasks.shemas.serializers",
        "description": "core.api.v1.tasks.shemas.serializers",
        "isExtraImport": true,
        "detail": "core.api.v1.tasks.shemas.serializers",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "TimedBaseModel",
        "importPath": "core.common.models",
        "description": "core.common.models",
        "isExtraImport": true,
        "detail": "core.common.models",
        "documentation": {}
    },
    {
        "label": "TaskTypeError",
        "importPath": "core.api.v1.tasks.exceptions.tasks",
        "description": "core.api.v1.tasks.exceptions.tasks",
        "isExtraImport": true,
        "detail": "core.api.v1.tasks.exceptions.tasks",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "TasksViewSet",
        "importPath": "core.api.v1.tasks.handlers.tasks",
        "description": "core.api.v1.tasks.handlers.tasks",
        "isExtraImport": true,
        "detail": "core.api.v1.tasks.handlers.tasks",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "environ",
        "description": "environ",
        "detail": "environ",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "TaskTypeError",
        "kind": 6,
        "importPath": "core.api.v1.tasks.exceptions.tasks",
        "description": "core.api.v1.tasks.exceptions.tasks",
        "peekOfCode": "class TaskTypeError(ServiceException):\n    @property\n    def message(self):\n        return 'Type error'",
        "detail": "core.api.v1.tasks.exceptions.tasks",
        "documentation": {}
    },
    {
        "label": "TasksViewSet",
        "kind": 6,
        "importPath": "core.api.v1.tasks.handlers.tasks",
        "description": "core.api.v1.tasks.handlers.tasks",
        "peekOfCode": "class TasksViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for CRUD list tasks\"\"\"\n    queryset = Task.objects.all()\n    serializer_class = TaskSerializer",
        "detail": "core.api.v1.tasks.handlers.tasks",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "core.api.v1.tasks.migrations.0001_initial",
        "description": "core.api.v1.tasks.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Task',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),",
        "detail": "core.api.v1.tasks.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Task",
        "kind": 6,
        "importPath": "core.api.v1.tasks.models.tasks",
        "description": "core.api.v1.tasks.models.tasks",
        "peekOfCode": "class Task(TimedBaseModel):\n    \"\"\"Model list of tasks\"\"\"\n    title = models.CharField(\n        verbose_name='Название',\n        max_length=100,\n    )\n    description = models.TextField(\n        verbose_name='Описание',\n        max_length=100,\n        blank=True,",
        "detail": "core.api.v1.tasks.models.tasks",
        "documentation": {}
    },
    {
        "label": "TaskSerializer",
        "kind": 6,
        "importPath": "core.api.v1.tasks.shemas.serializers",
        "description": "core.api.v1.tasks.shemas.serializers",
        "peekOfCode": "class TaskSerializer(serializers.Serializer):\n    \"\"\"Serializer for Task model.\"\"\"\n    class Meta:\n        model = Task\n        fields = ('__all__')\n    def validate_title(self, title):\n        if not isinstance(title, str) or len(title) < 1:\n            raise TaskTypeError('Вы ввели не верный тип данных или длинна должна быть боль 1 символа!')\n        return title\n    def create(self, validated_data):",
        "detail": "core.api.v1.tasks.shemas.serializers",
        "documentation": {}
    },
    {
        "label": "TaskAPITestCase",
        "kind": 6,
        "importPath": "core.api.v1.tasks.test.tests",
        "description": "core.api.v1.tasks.test.tests",
        "peekOfCode": "class TaskAPITestCase(TestCase):\n    \"\"\" Test module for Task API \"\"\"\n    def setUp(self):\n        Task.objects.create(title='Task 1', description='Description 1')\n        Task.objects.create(title='Task 2', description='Description 2')\n    def test_get_all_tasks(self):\n        response = client.get('/api/tasks/')\n        tasks = Task.objects.all()\n        serializer = TaskSerializer(tasks, many=True)\n        self.assertEqual(response.data, serializer.data)",
        "detail": "core.api.v1.tasks.test.tests",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "core.api.v1.tasks.test.tests",
        "description": "core.api.v1.tasks.test.tests",
        "peekOfCode": "client = APIClient()\nclass TaskAPITestCase(TestCase):\n    \"\"\" Test module for Task API \"\"\"\n    def setUp(self):\n        Task.objects.create(title='Task 1', description='Description 1')\n        Task.objects.create(title='Task 2', description='Description 2')\n    def test_get_all_tasks(self):\n        response = client.get('/api/tasks/')\n        tasks = Task.objects.all()\n        serializer = TaskSerializer(tasks, many=True)",
        "detail": "core.api.v1.tasks.test.tests",
        "documentation": {}
    },
    {
        "label": "TaskAdmin",
        "kind": 6,
        "importPath": "core.api.v1.tasks.admin",
        "description": "core.api.v1.tasks.admin",
        "peekOfCode": "class TaskAdmin(admin.ModelAdmin):\n    list_display = ('id', 'title', 'description', 'completed', 'created_at', 'updated_at')",
        "detail": "core.api.v1.tasks.admin",
        "documentation": {}
    },
    {
        "label": "TasksConfig",
        "kind": 6,
        "importPath": "core.api.v1.tasks.apps",
        "description": "core.api.v1.tasks.apps",
        "peekOfCode": "class TasksConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'core.api.v1.tasks'",
        "detail": "core.api.v1.tasks.apps",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "core.api.v1.tasks.urls",
        "description": "core.api.v1.tasks.urls",
        "peekOfCode": "app_name = 'task'\nrouter_v1 = DefaultRouter()\nrouter_v1.register(r'tasks', TasksViewSet, basename='tasks')\nurlpatterns = [\n    path('', include(router_v1.urls)),\n]",
        "detail": "core.api.v1.tasks.urls",
        "documentation": {}
    },
    {
        "label": "router_v1",
        "kind": 5,
        "importPath": "core.api.v1.tasks.urls",
        "description": "core.api.v1.tasks.urls",
        "peekOfCode": "router_v1 = DefaultRouter()\nrouter_v1.register(r'tasks', TasksViewSet, basename='tasks')\nurlpatterns = [\n    path('', include(router_v1.urls)),\n]",
        "detail": "core.api.v1.tasks.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "core.api.v1.tasks.urls",
        "description": "core.api.v1.tasks.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router_v1.urls)),\n]",
        "detail": "core.api.v1.tasks.urls",
        "documentation": {}
    },
    {
        "label": "ServiceException",
        "kind": 6,
        "importPath": "core.common.exceptions",
        "description": "core.common.exceptions",
        "peekOfCode": "class ServiceException(Exception):\n    @property\n    def message(self):\n        return 'Application exception occurred'",
        "detail": "core.common.exceptions",
        "documentation": {}
    },
    {
        "label": "TimedBaseModel",
        "kind": 6,
        "importPath": "core.common.models",
        "description": "core.common.models",
        "peekOfCode": "class TimedBaseModel(models.Model):\n    created_at = models.DateTimeField(\n        verbose_name='Дата создания',\n        auto_now_add=True,\n    )\n    updated_at = models.DateTimeField(\n        verbose_name='Дата обновления',\n        auto_now=True,\n    )\n    class Meta:",
        "detail": "core.common.models",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "core.project.settings.local",
        "description": "core.project.settings.local",
        "peekOfCode": "DEBUG = True",
        "detail": "core.project.settings.local",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "core.project.settings.settings",
        "description": "core.project.settings.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent.parent.parent\nenv = environ.Env()\nenviron.Env.read_env(BASE_DIR / '.env')\nSECRET_KEY = env('DJANGO_SECRET_KEY', default='mysecretkey')\nDEBUG = False\nALLOWED_HOSTS = []\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "core.project.settings.settings",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "core.project.settings.settings",
        "description": "core.project.settings.settings",
        "peekOfCode": "env = environ.Env()\nenviron.Env.read_env(BASE_DIR / '.env')\nSECRET_KEY = env('DJANGO_SECRET_KEY', default='mysecretkey')\nDEBUG = False\nALLOWED_HOSTS = []\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "core.project.settings.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "core.project.settings.settings",
        "description": "core.project.settings.settings",
        "peekOfCode": "SECRET_KEY = env('DJANGO_SECRET_KEY', default='mysecretkey')\nDEBUG = False\nALLOWED_HOSTS = []\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "core.project.settings.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "core.project.settings.settings",
        "description": "core.project.settings.settings",
        "peekOfCode": "DEBUG = False\nALLOWED_HOSTS = []\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',",
        "detail": "core.project.settings.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "core.project.settings.settings",
        "description": "core.project.settings.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    # first party apps",
        "detail": "core.project.settings.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "core.project.settings.settings",
        "description": "core.project.settings.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    # first party apps\n    'core.api.v1.tasks.apps.TasksConfig'",
        "detail": "core.project.settings.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "core.project.settings.settings",
        "description": "core.project.settings.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'core.project.urls'",
        "detail": "core.project.settings.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "core.project.settings.settings",
        "description": "core.project.settings.settings",
        "peekOfCode": "ROOT_URLCONF = 'core.project.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "core.project.settings.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "core.project.settings.settings",
        "description": "core.project.settings.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "core.project.settings.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "core.project.settings.settings",
        "description": "core.project.settings.settings",
        "peekOfCode": "WSGI_APPLICATION = 'core.project.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',",
        "detail": "core.project.settings.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "core.project.settings.settings",
        "description": "core.project.settings.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },",
        "detail": "core.project.settings.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "core.project.settings.settings",
        "description": "core.project.settings.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "core.project.settings.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "core.project.settings.settings",
        "description": "core.project.settings.settings",
        "peekOfCode": "LANGUAGE_CODE = 'ru'\nTIME_ZONE = 'Europe/Moscow'\nUSE_I18N = True\nUSE_TZ = True\nSTATIC_URL = 'static/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "core.project.settings.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "core.project.settings.settings",
        "description": "core.project.settings.settings",
        "peekOfCode": "TIME_ZONE = 'Europe/Moscow'\nUSE_I18N = True\nUSE_TZ = True\nSTATIC_URL = 'static/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "core.project.settings.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "core.project.settings.settings",
        "description": "core.project.settings.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\nSTATIC_URL = 'static/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "core.project.settings.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "core.project.settings.settings",
        "description": "core.project.settings.settings",
        "peekOfCode": "USE_TZ = True\nSTATIC_URL = 'static/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "core.project.settings.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "core.project.settings.settings",
        "description": "core.project.settings.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "core.project.settings.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "core.project.settings.settings",
        "description": "core.project.settings.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "core.project.settings.settings",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "core.project.asgi",
        "description": "core.project.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "core.project.asgi",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "core.project.urls",
        "description": "core.project.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('core.api.v1.tasks.urls'))\n]",
        "detail": "core.project.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "core.project.wsgi",
        "description": "core.project.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "core.project.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.project.settings.local')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]